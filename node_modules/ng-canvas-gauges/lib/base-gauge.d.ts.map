{"version":3,"file":"base-gauge.d.ts","sources":["base-gauge.d.ts"],"names":[],"mappingssourcesContent":["/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Vlad Martynenko <vladimir.martynenko.work@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nimport { NgZone, ElementRef, OnInit, AfterViewInit } from '@angular/core';\nimport * as CanvasGauges from 'canvas-gauges';\n/**\n * Base gauge component for the Gauges rendering\n * T - Type of the Gauge to be rendered (Currently RadialGauge, LinearGauge from the original library)\n * T2 - Type of config options used by the particular gauge (RadialGaugeOptions, LinearGaugeOptions)\n */\nexport declare abstract class BaseGauge<T extends CanvasGauges.BaseGauge, T2 extends CanvasGauges.GenericOptions> implements OnInit, AfterViewInit {\n    private el;\n    zone: NgZone;\n    /**\n     * Canvas element on the template used by the library to draw gauge element\n     */\n    protected canvas: ElementRef;\n    /**\n     * A gauge instance responsible for rendering and updates on the canvas.\n     * Subclasses should initialize in their ngOnInit implementation.\n     */\n    protected gauge: T;\n    /**\n     * Flag indicating that OnViewInit life-cycle has completed\n     */\n    private isInited;\n    /**\n     * value property of gauge prior to component view initialization\n     */\n    private preInitValue;\n    /**\n     * options property of gauge prior to component view initialization\n     */\n    private preInitOptions;\n    /**\n     * Listen for attribute changes, i.e., options properties that are stored\n     * as attributes on this ElementRef\n     */\n    private domListener;\n    /**\n     *\n     * @param el - reference to the element of the whole component, used to scrape options declared on the component itself\n     * @param zone - required to redraw gauge outside of Angular, due to animation lags caused by the ovewritten function of the ngZone\n     */\n    constructor(el: ElementRef, zone: NgZone);\n    /**\n     * Subclasses should instantiate the CanvasGauge object in the child component\n     */\n    abstract ngOnInit(): void;\n    /**\n     * Returns gauges properties as an options object.\n     * Option properties consist of the attribute-based properties and those\n     * explicitly set.\n     * @returns <T2>\n     */\n    /**\n    * Assign gauge options at anytime in the lifecycle.\n    * @param newOptions - assign the style and size properties\n    */\n    options: T2;\n    /**\n     * Assign the value of the gauge visual indicator such as a needle or pointer\n     * @param newValue  the guage new value\n     */\n    value: number;\n    /**\n     * Update the gauge options. Do not use until after OnViewInit() before using.\n     *\n     * Special implementation note - options.properties are maintained as\n     * attribute name->value on this component's elementRef.  Thus this method\n     * maps each newOptions property onto the property's corresponding attribute.\n     * The attribute update triggers a DOM mutation event which  \"this\" listens for.\n     * See #listenForDOMEvents()\n     *\n     * @param newOptions  - the options to update the gauge\n     */\n    update(newOptions: T2 | {}): void;\n    /**\n     * Perform gauge initialization.\n     * Subclasses that override this method must this super version\n     * for proper operation.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Listen for attribute-change events that are created when updating\n     * the options of this gauge.\n     */\n    protected listenForDOMEvents(): void;\n    /**\n     * Discontinue listening for attribute change events.\n     */\n    protected stopListeningForDOMEvents(): void;\n    /**\n     * Initalize the gauge with all options defined by attributes and\n     * parent component options.\n     */\n    protected initGauge(): void;\n    /**\n     * Performs the gauge update using the current options\n     * @param options  The options for the guage\n     */\n    protected basicUpdate(options: T2): void;\n}\n"]}